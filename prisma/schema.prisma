generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Event {
  id          String           @id @default(uuid())
  community   String
  title       String
  tagLine     String
  logo        String
  date        DateTime
  time        String
  location    String
  description String
  tickets     Int?
  background  String
  objectives  String[] // Prisma supports arrays with native types
  organizers  EventOrganizer[]
  partners    EventPartner[]
  speakers    EventSpeaker[]
  Reservation Reservation[]
  status EventStatus @default(COMING)
}

enum EventStatus {
  COMING
  ON_GOING
  CANCELED
  DONE
}

model EventOrganizer {
  id          String @id @default(uuid())
  eventId     String
  organizerId String

  event     Event     @relation(fields: [eventId], references: [id])
  community Community @relation(fields: [organizerId], references: [id])
}

model EventPartner {
  id        String @id @default(uuid())
  eventId   String
  partnerId String

  event   Event   @relation(fields: [eventId], references: [id])
  partner Partner @relation(fields: [partnerId], references: [id])
}

model EventSpeaker {
  id           String        @id @default(uuid())
  eventId      String
  speakerId    String

  event   Event @relation(fields: [eventId], references: [id])
  speaker User  @relation(fields: [speakerId], references: [id])
}

model Community {
  id          String             @id @default(uuid())
  name        String
  image       String
  background  String
  location    String
  description String
  url         String
  tagLine     String
  events      EventOrganizer[]
  members     CommunityMember[]
  partners    CommunityPartner[]
}

model CommunityPartner {
  id          String @id @default(uuid())
  communityId String
  partnerId   String

  community Community @relation(fields: [communityId], references: [id])
  partner   Partner   @relation(fields: [partnerId], references: [id])
}

model CommunityMember {
  id          String @id @default(uuid())
  communityId String
  memberId    String

  community Community @relation(fields: [communityId], references: [id])
  member    User      @relation(fields: [memberId], references: [id])
  role  CommunityRole    @default(MEMBER)
}

enum CommunityRole {
  MEMBER
  CORE_MEMBER
  ADMIN
}

model Partner {
  id          String             @id @default(uuid())
  name        String
  image       String
  events      EventPartner[]
  communities CommunityPartner[]
}

model User {
  id           String            @id @default(uuid())
  name         String
  email        String            @unique
  password     String
  image        String
  communities  CommunityMember[]
  events       EventSpeaker[]
  reservations Reservation[]
}

model Reservation {
  id             String        @id @default(uuid())
  code           String
  participated   Boolean       @default(false)
  user           User          @relation(fields: [userId], references: [id])
  event          Event         @relation(fields: [eventId], references: [id])
  userId         String
  eventId        String
}
